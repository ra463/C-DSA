(1) variable -> is a container to hold data
(2) data type -> defines the type of data a VARIABLE can hold
(3) by default C++ takes decimal values as double not float...
(4) typcasting means to convert one data type to another data type
(5) constant are used when we wish that the values of certain things does not change.
        i.e const int a = 3.14; --if we try to change the value of a we will get an error
(6) manipulator are those operators which are used to formatt the data
(7) precedence means that which arithematic operator will be executed first
(8) associativity means that which arithematic operator will be executed first and if the oprator is same then it associativity is checked
(9) sizeof() is a operator which is used to find the size of a variable
(10) control structure in c++
        i) selection structure
        ii) sequence structure
        iii) loop structure

                a) if
                b) if else
                c) nested if
                d) switch
                a) for
                b) while
                c) do while
                a) break
                b) continue
                c) goto

(11) array is a collection of similar data types int, float, char, double etc
(12) loop are used to execute a block of code multiple times
(13) pointer is a data type which holds the address of another variable
(14) function is a block of code which is used to perform a specific task
(15) pointer arithematic formula:
        new_address = current_address + (i * sizeof(data_type))
(16) structure is a user-defined data types which is used to different type of data-type
(17) char can store only one character.
(18) unions are used to store different data types in a single variable.they are like structure but provide better memory management
(19) enum is a user-defined data type which is used to store a list of constants
(20) typedef is a keyword which is used to give a new name to an existing data type
(21) file handling is a process of storing data in a file and retrieving data from a file
(22) class is a user-defined data type which is used to store different data types
(23) object is a instance of a class
(24) function prototyping is a process of declaring a function before its definition
(25) A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function.
(26) actual parameters are the values passed to the function
(27) formal parameters are the parameters of the function
(28) call by reference is a method of passing arguments to a function in which the address of the arguments is passed to the function
(29) call by value is a method of passing arguments to a function in which the value of the arguments is passed to the function
(30) static variable is a variable which is declared inside a function and it's value is retained even after the function has returned a value 
(31) inline function is a function which is declared as inline and it's definition is inserted at the point of call
        -->we should not use inline function when:
                1) If a function contains a loop. (for, while, do-while)
                2) If a function contains static variables.
                3) If a function is recursive.
                4) If a function return type is other than void, and the return statement doesnâ€™t exist in function body.
                5) If a function contains switch or goto statement.
(32) default argument is a argument which is passed to a function if no argument is passed to the function
(33) constant variable --> When you do not want others (or yourself) to change existing variable values, use the const keyword
(34) Recursion --> Recursion is the technique of making a function call itself. This technique provides a way to break complicated problems down into simple problems which are easier to solve.
(35) Function overloading --> Function overloading is the ability to create multiple functions of the same name with different parameters.
(36) Function overriding --> Function overriding is the ability of a derived class to override

-------------------------OOPS------------------------

(37) OOP stands for Object-Oriented Programming. Object-oriented programming has several advantages over procedural programming:
        OOP provides a clear structure for the programs
        OOP is faster and easier to execute
        OOP helps to keep the C++ code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
        OOP makes it possible to create full reusable applications with less code and shorter development time

(38) Nesting of member function --> A member function called into another member function is referred to as nesting of member functions in C++.
(39) memory allocation in C++ --> Memory allocation in C++ is the process of allocating memory to a variable or an array. Memory allocation is done by using the new operator.
(40) memory deallocation in C++ --> Memory deallocation in C++ is the process of freeing the memory allocated to a variable or an array. Memory deallocation is done by using the delete operator.
(41) static data member --> A static data member is a member of a class that is shared by all objects of that class. Static data members are declared with the static keyword.
(42) static member function --> A static member function is a member function that can be called even if no objects of the class exist and the static functions are accessed using only the class name and the scope resolution operator ::.
        --> A static member function is independent of any object of the class. 
        --> A static member function can be called even if no objects of the class exist.
        --> A static member function can also be accessed using the class name through the scope resolution operator.
        --> A static member function can access static data members and static member functions inside or outside of the class.
        --> Static member functions have a scope inside the class and cannot access the current object pointer.
        --> You can also use a static member function to determine how many objects of the class have been created.
(43) friend function --> A friend function of a class is defined outside that class's scope but it has the right to access all private and protected members of the class. Even though the prototypes for friend functions appear in the class definition, friends are not member functions.
(44) constructor --> A constructor is a special member function of a class that is executed whenever we create new objects of that class.
        --> A constructor has the same name as of the class and it does not have any return type.
        --> A constructor is automatically invoked whenever an object is created.
        --> A constructor can be used to set the initial values for certain member variables, or carry out other initialization tasks.
(45) destructor --> A destructor is a special member function of a class that is executed whenever we delete objects of that class or when the object goes out of scope.
        --> A destructor has the same name as of the class preceded by a tilde (~) and it does not have any return type.
        --> A destructor is automatically invoked whenever an object is deleted.
        --> A destructor can be used to deallocate memory, close files, close network connections, etc.
        --> A destructor never takes any argument nor it return any value and cannot be overloaded.
(46) copy constructor --> A copy constructor is a member function which initializes an object using another object of the same class. A copy constructor has the following general function prototype:
        syntax --> className (className &old_obj);
        --> A copy constructor is called in the following situations:
                1) When an object of the class is returned
                2) When an object of the class is passed (to a function) by value as an argument
(47) paramaterized constructor --> A parameterized constructor is a constructor which takes parameters. A parameterized constructor is used to provide different values to the different data members of different objects.
(48) default constructor --> A default constructor is a constructor which takes no parameters. A default constructor is used to provide the default values to the data members of an object.
(49) important --> if we dont create copy constructor then compiler will create/supplies its own copy constructor

----------------------Inheritance-----------------------------

(50) Inheritance --> Inheritance is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of object-oriented programming and is used to achieve runtime polymorphism.
        -->The derived class is the specialized class for the base class.
                ->Sub Class: The class that inherits properties from another class is called Subclass or Derived Class. 
                ->Super Class: The class whose properties are inherited by a subclass is called Base Class or Superclass. 
(51) Types of inheritance --> There are three types of inheritance in C++:
        1) Single inheritance
        2) Multiple inheritance
        3) Multilevel inheritance
        4) Hierarchical inheritance
        5) Hybrid inheritance
(52) Single inheritance --> In single inheritance, only one class is inherited by another class.
(53) Multiple inheritance --> Multiple Inheritance is a feature of C++ where a class can inherit from more than one class. i.e one subclass is inherited from more than one base class.
(54) Hierarchical inheritance --> In this type of inheritance, more than one subclass is inherited from a single base class. i.e. more than one derived class is created from a single base class.
(55) Multilevel inheritance --> In multilevel inheritance, a class is derived from another derived class. i.e. a derived class is inherited from another derived class.
(56) Hybrid inheritance --> Hybrid inheritance is a combination of more than one type of inheritance. i.e. a class is derived from more than one base class and also inherits from a derived class.
(57) protected access specifier --> The protected access specifier is similar to the private access specifier, except that the members declared protected can be accessed by the members of their own class and by the members of their derived classes.
(58) public access specifier --> The public access specifier is the most accessible access specifier. The members declared public can be accessed by any other code that has access to the object.
(59) private access specifier --> The private access specifier is the least accessible access specifier. The members declared private can be accessed only by the members of their own class.
(60) protected inheritance --> Protected inheritance is a form of inheritance in which the base class members are declared protected in the derived class.
(61) Ambiguty --> Ambiguity is a situation in which a derived class inherits two or more base classes that have members with the same name and signature.
(62) virtual base class --> A virtual base class is a base class that is used in multiple inheritance to avoid ambiguity.
(63) this pointer --> this is a keyword that refers to the current instance of the class. There can be 3 main usage of this keyword in C++.
        --> When local variableâ€™s name is same as memberâ€™s name
        --> To return reference to the calling object
        --> It can be used to declare indexers.
(64) Polymorphism --> Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.
(65) Types of polymorphism --> There are two types of polymorphism in C++:
        1) Compile time polymorphism
        2) Runtime polymorphism
(66) Compile time polymorphism --> Compile time polymorphism is also known as static polymorphism. This type of polymorphism is achieved by function overloading or operator overloading.
(67) Runtime polymorphism --> Runtime polymorphism is also known as dynamic polymorphism. This type of polymorphism is achieved by function overriding.
(68) virtual functon --> Virtual function is used to achieve the runtime polymorphism.
(69) abstract class --> Sometimes implementation of all function cannot be provided in a base class because we donâ€™t know the implementation. Such a class is called abstract class.
        --> A class is abstract if it has at least one pure virtual function. A pure virtual function is specified by placing "= 0" in its declaration.
        --> We can have pointers and references of abstract class type. 
        --> An abstract class can have constructors. 
        --> An abstract class in C++ can also be defined using struct keyword.